# Generated by Django 5.2.7 on 2025-10-21 12:47

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('drifts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('recommendation_type', models.CharField(choices=[('auto_revert', 'Automatic Revert'), ('codify_iac', 'Update IaC Definition'), ('escalate_review', 'Escalate for Human Review'), ('accept_exception', 'Accept as Exception'), ('manual_review', 'Manual Review Required'), ('security_patch', 'Security Patch Required'), ('compliance_update', 'Compliance Update Needed')], max_length=30)),
                ('title_template', models.CharField(help_text='Template for the recommendation title', max_length=200)),
                ('rationale_template', models.TextField(help_text='Template for the rationale text')),
                ('steps_template', models.JSONField(blank=True, default=list, help_text='Template for implementation steps')),
                ('default_priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical Priority')], default='medium', max_length=10)),
                ('default_effort', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days')], max_length=20, null=True)),
                ('default_effort_quantity', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('auto_revert', 'Automatic Revert'), ('codify_iac', 'Update IaC Definition'), ('escalate_review', 'Escalate for Human Review'), ('accept_exception', 'Accept as Exception'), ('manual_review', 'Manual Review Required'), ('security_patch', 'Security Patch Required'), ('compliance_update', 'Compliance Update Needed')], max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical Priority')], default='medium', max_length=10)),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='Confidence in this recommendation (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('title', models.CharField(help_text='Short title for the recommendation', max_length=200)),
                ('rationale', models.TextField(help_text='Detailed explanation of why this recommendation is suggested')),
                ('implementation_steps', models.JSONField(blank=True, default=list, help_text='Ordered list of steps to implement the recommendation')),
                ('risk_assessment', models.JSONField(blank=True, default=dict, help_text='Assessment of success probability and potential impacts')),
                ('estimated_effort', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days')], help_text='Estimated time to implement', max_length=20, null=True)),
                ('effort_quantity', models.IntegerField(blank=True, help_text='Quantity of time units (e.g., 2 hours, 3 days)', null=True)),
                ('recommended_by', models.CharField(choices=[('ml_model', 'ML Model'), ('ai_agent', 'AI Agent'), ('human', 'Human Expert'), ('rule_engine', 'Rule Engine')], default='ml_model', max_length=50)),
                ('recommended_by_details', models.JSONField(blank=True, default=dict, help_text='Details about who/what generated this recommendation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this recommendation expires', null=True)),
                ('implemented_at', models.DateTimeField(blank=True, help_text='When this recommendation was implemented', null=True)),
                ('implementation_result', models.JSONField(blank=True, default=dict, help_text='Results of implementation attempt')),
                ('is_implemented', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('drift_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='drifts.driftevent')),
            ],
            options={
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('implemented_successfully', 'Implemented Successfully'), ('implemented_with_issues', 'Implemented with Issues'), ('wrong_recommendation', 'Wrong Recommendation'), ('too_complex', 'Too Complex to Implement')], max_length=30)),
                ('rating', models.IntegerField(blank=True, help_text='Rating from 1-5 (optional)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True, help_text='Additional feedback comments')),
                ('user_id', models.IntegerField(help_text='User who provided feedback')),
                ('user_role', models.CharField(blank=True, help_text='Role of the user (admin, editor, viewer)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='recommendations.recommendation')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['drift_event', 'created_at'], name='recommendat_drift_e_26e27a_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['recommendation_type', 'priority'], name='recommendat_recomme_4da957_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['confidence_score'], name='recommendat_confide_fd7ea1_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['expires_at'], name='recommendat_expires_6bf04d_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['is_implemented'], name='recommendat_is_impl_5b384e_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['recommendation', 'created_at'], name='recommendat_recomme_977089_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['feedback_type'], name='recommendat_feedbac_b0a5cd_idx'),
        ),
    ]
